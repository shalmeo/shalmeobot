from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram_dialog import DialogManager, StartMode
from sqlalchemy.ext.asyncio import AsyncSession
from glQiwiApi import QiwiWrapper
from glQiwiApi.utils.exceptions import APIError


from tgbot.config import Config
from tgbot.services.database.models import Items, User
from tgbot.states.profile_dialog import ProfileSG
from tgbot.keyboards.inline import buy_kb, check_paid, confirmation_kb, confirmation_cb, buy_cb, successful_payment_kb
from tgbot.misc.send_to_admin import send_admin


async def confirmation(call: types.CallbackQuery, state: FSMContext, callback_data: dict,
                       session: AsyncSession, user: User):
    if not user.email:
        await call.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∫—É–ø–∫–∏.\n'
                          '–ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—á—Ç—É.\n'
                          '–í –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏:\n'
                          '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -> –ü—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—á—Ç—É', show_alert=True)
        return
    item_id = (await state.get_data()).get('item_id')
    item: Items = await session.get(Items, item_id)
    action = callback_data.get('action')
    await call.message.edit_caption('–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?\n'
                                    f'{item.title}\n'
                                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 —à—Ç.\n\n'
                                    f'–¶–µ–Ω–∞ {item.price}‚ÇΩ',
                                    reply_markup=confirmation_kb(action))


async def payment(call: types.CallbackQuery, state: FSMContext, qiwi_p2p_client: QiwiWrapper, session: AsyncSession):
    item_id = (await state.get_data()).get('item_id')
    item: Items = await session.get(Items, item_id)
    
    try:
        async with qiwi_p2p_client:
            bill = await qiwi_p2p_client.create_p2p_bill(amount=item.price)
        await state.update_data(bill_id=bill.bill_id)
        await call.message.edit_caption(f"üîó –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –ø–æ —Å—Å–ª—ã–∫–µ –Ω–∏–∂–µ:\n {bill.pay_url}",
                                        reply_markup=check_paid())
    except APIError:
        await call.answer('üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', show_alert=False)
    

async def successful_payment(call: types.CallbackQuery, state: FSMContext, user: User, session: AsyncSession,
                             config: Config, qiwi_p2p_client: QiwiWrapper):
    bill_id = (await state.get_data()).get('bill_id')
    
    if await qiwi_p2p_client.check_p2p_bill_status(bill_id) == 'PAID':
        await call.message.edit_caption("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–∫—É–ø–∫—É!\n"
                                        "–í —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω\n\n"
                                        "–ï—Å–ª–∏ —Å –≤–∞–º–∏ –Ω–µ —Å–≤–∑—è–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è\n"
                                        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ -> @zshalm",
                                        reply_markup=successful_payment_kb())        
        item_id = (await state.get_data()).get('item_id')
        item: Items = await session.get(Items, item_id)
        await send_admin(call.bot, 
                         call.from_user.get_mention(as_html=True), 
                         config.tg_bot.admin_ids[0], 
                         item,
                         user)
        user.purchases += 1
        user.amount += item.price
        await session.commit()
        await state.reset_data()
    else:
        await call.answer("üòî –°—á–µ—Ç –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω", show_alert=False)
        

async def payment_with_points(call: types.CallbackQuery, state: FSMContext, user: User,
                              session: AsyncSession, config: Config):
    item_id = (await state.get_data()).get('item_id')
    item: Items = await session.get(Items, item_id)    
    
    if user.points >= item.price:
        await call.message.edit_caption("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–∫—É–ø–∫—É!\n"
                                        "–í —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω\n\n"
                                        "–ï—Å–ª–∏ —Å –≤–∞–º–∏ –Ω–µ —Å–≤–∑—è–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è\n"
                                        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ -> @zshalm",
                                        reply_markup=successful_payment_kb())
        await send_admin(call.bot, 
                         call.from_user.get_mention(as_html=True), 
                         config.tg_bot.admin_ids, 
                         item,
                         user)
        user.points -= item.price
        user.amount += item.price
        user.purchases += 1
        await session.commit()
        await state.reset_data()
    else:
        await call.answer("üòî –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–ª–æ–≤", show_alert=False)
        

async def to_profile(call: types.CallbackQuery, dialog_manager: DialogManager):
    await call.message.delete()
    await dialog_manager.start(ProfileSG.profile, mode=StartMode.RESET_STACK)
    
    
async def cancel(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    item_id = (await state.get_data()).get('item_id')
    item: Items = await session.get(Items, item_id)
    
    await call.message.edit_caption(f'üìå <b>–ê—Ä—Ç–∏–∫–ª—å:</b> {item.id}\n'
                                    f'üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{item.description}\n\n'
                                    f'üíµ <b>–¶–µ–Ω–∞:</b> {item.price}‚ÇΩ', 
                                    reply_markup=buy_kb())
        
            
def setup(dp: Dispatcher):
    dp.register_callback_query_handler(confirmation, buy_cb.filter())
    dp.register_callback_query_handler(payment, confirmation_cb.filter(action='buy_item'))
    dp.register_callback_query_handler(successful_payment, confirmation_cb.filter(action='check_paid'))
    dp.register_callback_query_handler(payment_with_points, confirmation_cb.filter(action='buy_with_points'))
    dp.register_callback_query_handler(to_profile, confirmation_cb.filter(action='to_profile'))
    dp.register_callback_query_handler(cancel, confirmation_cb.filter(action='cancel'))